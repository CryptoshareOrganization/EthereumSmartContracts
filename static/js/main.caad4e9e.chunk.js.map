{"version":3,"sources":["Components/Fruit.tsx","Hooks/buyFruit.tsx","App.tsx","index.tsx"],"names":["theme","createTheme","typography","fontFamily","join","palette","primary","light","main","dark","contrastText","secondary","components","MuiButton","styleOverrides","root","color","background","border","borderRadius","boxShadow","height","padding","fontSize","MuiFab","Fruitpayment","useEthers","chainId","account","activate","activateBrowserWallet","deactivate","provider","WalletConnectProvider","infuraId","enable","etherBalance","useEtherBalance","formattedBalance","parseFloat","formatUnits","console","log","isConnected","undefined","helperConfig","useState","fruitType","setFruitType","notifications","useNotifications","count","setCount","abi","FRT","fruitInterface","utils","Interface","fruitContract","Contract","useContractFunction","transactionName","buyAppleFruit","send","applePurchaseState","state","buyBananaFruit","bananaPurchaseState","buyStrawberryFruit","strawberryPurchaseState","buyMangoFruit","sendAppleAmount","fruitAmount","asString","toString","value","parseEther","sendBananaAmount","sendStrawberryAmount","sendMangoAmount","mangoPurchaseState","Sendpurchase","enoughEth","setEnoughEthState","handleeth","showPurchaseSuccess","setPurchaseSuccess","handleCloseSnack","useEffect","filter","notification","type","length","isMining","status","ThemeProvider","Container","maxWidth","sx","display","flexDirection","xs","md","justifyContent","Box","Typography","mt","fontWeight","bgcolor","alignItems","minHeight","minWidth","marginRight","marginLeft","marginTop","m","FormControl","variant","InputLabel","id","Select","labelId","onChange","event","target","label","MenuItem","component","margin","Fab","size","onClick","backgroundColor","Button","disabled","CircularProgress","onConnect","Snackbar","open","autoHideDuration","onClose","Alert","severity","App","config","readOnlyChainId","Goerli","readOnlyUrls","networks","expirationPeriod","checkInterval","DAppProvider","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.caad4e9e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useEthers, useNotifications, useEtherBalance } from \"@usedapp/core\"\r\nimport { Sendpurchase } from '../Hooks/buyFruit';\r\nimport Fab from '@mui/material/Fab';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport RemoveIcon from '@mui/icons-material/Remove';\r\nimport helperConfig from \"../build/helper-config.json\"\r\nimport { Container, Box, Button, CircularProgress, Snackbar, Alert } from \"@mui/material\"\r\nimport type { } from '@mui/lab/themeAugmentation';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Typography } from '@mui/material';\r\nimport { formatUnits } from \"@ethersproject/units\"\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\n\r\n\r\nconst theme = createTheme({\r\n  typography: {\r\n    fontFamily: [\r\n      \"Audiowide\",\r\n      \"cursive\",\r\n    ].join(','),\r\n  },\r\n  palette: {\r\n    primary: {\r\n      light: '#757ce8',\r\n      main: '#C2D52F',\r\n      dark: '#002884',\r\n      contrastText: '#fff',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#C2D52F',\r\n      dark: '#ba000d',\r\n      contrastText: '#000',\r\n    },\r\n  },\r\n  components: {\r\n    MuiButton: {\r\n      styleOverrides: {\r\n        root: {\r\n          color: 'white',\r\n          background: '#C2D52F',\r\n          border: 0,\r\n          borderRadius: 5,\r\n          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n          height: 48,\r\n          padding: '0 30px',\r\n          fontSize: '2rem'\r\n        },\r\n      },\r\n\r\n    },\r\n    MuiFab: {\r\n      styleOverrides: {\r\n        root: {\r\n          background: \"#C2D52F\",\r\n          color: \"white\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\r\n\r\n\r\n\r\n\r\nexport const Fruitpayment = () => {\r\n\r\n  //Mint Logic\r\n\r\n  const { chainId, account, activate, activateBrowserWallet, deactivate } = useEthers()\r\n\r\n  async function onConnect() {\r\n    const provider = new WalletConnectProvider({\r\n      infuraId: \"b04ea8396873436db4da7c31a48a9950\",\r\n    });\r\n\r\n    //  Enable session (triggers QR Code modal)\r\n    await provider.enable();\r\n    await activate(provider)\r\n  }// change inf\r\n\r\n  const etherBalance = useEtherBalance(account)\r\n  const formattedBalance: number = etherBalance\r\n    ? parseFloat(formatUnits(etherBalance, 18))\r\n    : 0;\r\n  console.log(formattedBalance)\r\n  \r\n  const isConnected = account !== undefined\r\n\r\n  const networkName = chainId ? helperConfig[chainId] : \"dev\"\r\n\r\n  \r\n  const [fruitType, setFruitType] = useState(\"\");\r\n\r\n\r\n  const { notifications } = useNotifications();\r\n  \r\n\r\n  const increment = () => {\r\n    if (count < 9) {\r\n      setCount((count) => count + 1)\r\n    }\r\n  }\r\n\r\n  const handleFruitChange = (event: any) => {\r\n    setFruitType(event.target.value)\r\n  }\r\n\r\n  const decrement = () => {\r\n    if (count > 1) {\r\n      setCount((count) => count - 1)\r\n    }\r\n  }\r\n\r\n  const [count, setCount] = useState<number>(1)\r\n\r\n  const {sendAppleAmount, applePurchaseState, sendBananaAmount, bananaPurchaseState, sendStrawberryAmount, strawberryPurchaseState, sendMangoAmount, mangoPurchaseState} = Sendpurchase()\r\n\r\n  const [enoughEth, setEnoughEthState] = useState(true)\r\n\r\n\r\n  const sendCountValue = () => {\r\n    if (fruitType === \"apple\") {\r\n\r\n      const bal = 0.0002 * count\r\n    if (formattedBalance < bal) {\r\n      setEnoughEthState(false)\r\n    }\r\n\r\n    sendAppleAmount(count)\r\n\r\n    } else if (fruitType === \"banana\") {\r\n\r\n      const bal = 0.0003 * count\r\n    if (formattedBalance < bal) {\r\n      setEnoughEthState(false)\r\n    }\r\n\r\n    sendBananaAmount(count)\r\n\r\n    } else if (fruitType === \"strawberry\") {\r\n\r\n      const bal = 0.0004 * count\r\n    if (formattedBalance < bal) {\r\n      setEnoughEthState(false)\r\n    }\r\n\r\n    sendStrawberryAmount(count)\r\n\r\n    }\r\n\r\n    else if (fruitType === \"mango\") {\r\n\r\n      const bal = 0.0005 * count\r\n    if (formattedBalance < bal) {\r\n      setEnoughEthState(false)\r\n    }\r\n\r\n    sendMangoAmount(count)\r\n    }\r\n  }\r\n\r\n  const handleeth = () => {\r\n    setEnoughEthState(true)\r\n  }\r\n\r\n  const [showPurchaseSuccess, setPurchaseSuccess] = useState(false)\r\n\r\n  const handleCloseSnack = () => {\r\n    setPurchaseSuccess(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      notifications.filter(\r\n        (notification) =>\r\n          notification.type === \"transactionSucceed\" &&\r\n          notification.transactionName === \"fruitpurchase\"\r\n      ).length > 0\r\n    ) {\r\n      setPurchaseSuccess(true)\r\n    }\r\n\r\n  }, [notifications, showPurchaseSuccess]);\r\n\r\n  const isMining = applePurchaseState.status === \"Mining\" || bananaPurchaseState.status === \"Mining\" || strawberryPurchaseState.status === \"Mining\" || mangoPurchaseState.status === \"Mining\";\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container maxWidth=\"md\" sx={{ display: \"flex\", flexDirection: { xs: 'column', md: 'row' }, justifyContent: \"center\" }}>\r\n        <Box>\r\n          <Typography sx={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            mt: 13,\r\n            fontWeight: \"bold\",\r\n            fontSize: 30,\r\n            fontFamily: 'Audiowide'\r\n          }} color=\"primary.main\">FRUIT SHOP</Typography>\r\n          <Box sx={{\r\n            bgcolor: \"transparent\",\r\n            alignItems: \"center\",\r\n            flexDirection: \"column\",\r\n            minHeight: 400,\r\n            minWidth: { sx: \"auto\", md: 400 },\r\n            marginRight: \"auto\",\r\n            marginLeft: \"auto\",\r\n            justifyContent: \"center\",\r\n            // borderRadius: 4,\r\n            // borderStyle: \"dotted\",\r\n            // borderColor: \"#C2D52F\",\r\n            marginTop: 3,\r\n          }}>\r\n            \r\n            <Box sx={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              m: 3,\r\n              mt: 7,\r\n            }}>\r\n              <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\r\n                    <InputLabel id=\"demo-simple-select-standard-label\">Fruits</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-standard-label\"\r\n                        id=\"demo-simple-select-standard\"\r\n                        value={fruitType}\r\n                        onChange={handleFruitChange}\r\n                        label=\"Select Fruit\"\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n                        <MenuItem value={\"apple\"}>Apple</MenuItem>\r\n                        <MenuItem value={\"banana\"}>Banana</MenuItem>\r\n                        <MenuItem value={\"strawberry\"}>Strawberry</MenuItem>\r\n                        <MenuItem value={\"mango\"}>Mango</MenuItem>\r\n                       \r\n                    </Select>\r\n                </FormControl>\r\n                <Box component=\"span\" sx={{ color: \"primary.main\", fontSize: 20, mt: 1, fontWeight: \"medium\", fontFamily: 'Audiowide' }}>1 Apple is 0.0002 ETH</Box>\r\n                <Box component=\"span\" sx={{ color: \"primary.main\", fontSize: 20, mt: 1, fontWeight: \"medium\", fontFamily: 'Audiowide' }}>1 Banana is 0.0003 ETH</Box>\r\n                <Box component=\"span\" sx={{ color: \"primary.main\", fontSize: 20, mt: 1, fontWeight: \"medium\", fontFamily: 'Audiowide' }}>1 Strawberry is 0.0004 ETH</Box>\r\n                <Box component=\"span\" sx={{ color: \"primary.main\", fontSize: 20, mt: 1, fontWeight: \"medium\", fontFamily: 'Audiowide' }}>1 Mango is 0.0005 ETH</Box>\r\n              <Box sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignItems: \"center\",\r\n                margin: 3,\r\n              }}>\r\n                <Fab size=\"small\" onClick={decrement} aria-label=\"remove\" sx={{ m: 1 }}>\r\n                  <RemoveIcon />\r\n                </Fab>\r\n                <Box component=\"span\" sx={{ m: 1, color: \"white\", fontSize: 16,  fontFamily: 'Audiowide', backgroundColor: \"#C2D52F\", padding: \"10px\", borderRadius:\"5px\"}}>{count}</Box>\r\n                <Fab size=\"small\" onClick={increment} aria-label=\"add\" sx={{ m: 1 }}>\r\n                  <AddIcon />\r\n                </Fab>\r\n              </Box>\r\n              <Box sx={{\r\n                alignItems: \"center\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\"\r\n              }}>\r\n                {isConnected ? (\r\n                  <Button\r\n                    sx={{ m: 4, }}\r\n                    color=\"primary\" variant=\"contained\"\r\n                    onClick={sendCountValue}\r\n                    disabled={isMining}>\r\n                    {isMining ? <CircularProgress color=\"primary\" size={35} /> : \"Buy Fruit\"}\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                  sx={{ m: 4, }}\r\n                  color=\"primary\" variant=\"contained\"\r\n                    onClick={() => activateBrowserWallet()}>\r\n                    Metamask\r\n                  </Button>\r\n                )\r\n                }\r\n              </Box>\r\n              <Box sx={{\r\n                alignItems: \"center\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\"\r\n              }}>\r\n                {isConnected ? (\r\n                  <Button\r\n                  sx={{ m: 4, fontSize: 15 }}\r\n                  color=\"primary\" variant=\"contained\"\r\n                  onClick={deactivate}>\r\n                  Disconnect\r\n                </Button>\r\n                ) : (\r\n                  <Button \r\n                  color=\"primary\" variant=\"contained\"\r\n                    onClick={() => onConnect()}>\r\n                    WalletConnect\r\n                  </Button>\r\n                )\r\n                }\r\n              </Box>\r\n              <Box sx={{\r\n                alignItems: \"center\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\"\r\n              }}>\r\n\r\n              </Box>\r\n              <Snackbar\r\n                open={showPurchaseSuccess}\r\n                autoHideDuration={5000}\r\n                onClose={handleCloseSnack}>\r\n                <Alert onClose={handleCloseSnack} severity=\"success\">\r\n                  You've succesfully purchased {count} {fruitType}\r\n                </Alert>\r\n              </Snackbar>\r\n              <Snackbar\r\n                open={!enoughEth}\r\n                autoHideDuration={5000}\r\n                onClose={handleeth}>\r\n                <Alert onClose={handleeth} severity=\"error\">\r\n                  Oops! Not enough ETH\r\n                </Alert>\r\n              </Snackbar>\r\n\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </ThemeProvider>\r\n  )\r\n}","import { useContractFunction } from \"@usedapp/core\"\r\nimport FRT from \"../build/contracts/FruitShop.json\"\r\nimport { utils } from \"ethers\"\r\nimport { Contract } from \"@ethersproject/contracts\"\r\n\r\nexport const Sendpurchase = () => {\r\n    const { abi } = FRT\r\n\r\n    const fruitContractAddress = \"0x28b1481aA1fa2dbf887eF560Db9CB2007746D523\"\r\n\r\n\r\n    const fruitInterface = new utils.Interface(abi)\r\n    const fruitContract = new Contract(fruitContractAddress, fruitInterface)\r\n\r\n    const { send: buyAppleFruit, state: applePurchaseState } =\r\n        useContractFunction(fruitContract, \"buyApple\", { transactionName: \"fruitpurchase\" })\r\n\r\n    const sendAppleAmount = (fruitAmount: number) => {\r\n        const fruitCost = fruitAmount * 0.0002\r\n        const asString = fruitCost.toString()\r\n        buyAppleFruit(fruitAmount, { value: utils.parseEther(asString) })\r\n    }\r\n\r\n    const { send: buyBananaFruit, state: bananaPurchaseState } =\r\n        useContractFunction(fruitContract, \"buyBanana\", { transactionName: \"fruitpurchase\" })\r\n\r\n    const sendBananaAmount = (fruitAmount: number) => {\r\n        const fruitCost = fruitAmount * 0.0003\r\n        const asString = fruitCost.toString()\r\n        buyBananaFruit(fruitAmount, { value: utils.parseEther(asString) })\r\n    }\r\n\r\n    const { send: buyStrawberryFruit, state: strawberryPurchaseState } =\r\n        useContractFunction(fruitContract, \"buyStrawberry\", { transactionName: \"fruitpurchase\" })\r\n\r\n    const sendStrawberryAmount = (fruitAmount: number) => {\r\n        const fruitCost = fruitAmount * 0.0004\r\n        const asString = fruitCost.toString()\r\n        buyStrawberryFruit(fruitAmount, { value: utils.parseEther(asString) })\r\n    }\r\n\r\n    const { send: buyMangoFruit, state: mangoPurchaseState } =\r\n        useContractFunction(fruitContract, \"buyMango\", { transactionName: \"fruitpurchase\" })\r\n\r\n    const sendMangoAmount = (fruitAmount: number) => {\r\n        const fruitCost = fruitAmount * 0.0005\r\n        const asString = fruitCost.toString()\r\n        buyMangoFruit(fruitAmount, { value: utils.parseEther(asString) })\r\n    }\r\n\r\n    return { sendAppleAmount, applePurchaseState, sendBananaAmount, bananaPurchaseState, sendStrawberryAmount, strawberryPurchaseState, sendMangoAmount, mangoPurchaseState }\r\n}","import React from 'react';\r\nimport {Fruitpayment} from \"./Components/Fruit\"\r\nimport {Config, DAppProvider, Goerli} from \"@usedapp/core\"\r\n\r\n\r\n\r\nfunction App() {\r\n  const config: Config = {\r\n    readOnlyChainId: Goerli.chainId,\r\n    readOnlyUrls: {\r\n      [Goerli.chainId]: 'https://eth-goerli.g.alchemy.com/v2/lTEJhXROfxDAg885-GyhYN0shhBS6hEu',\r\n    },\r\n    networks: [Goerli],\r\n    notifications: {\r\n      expirationPeriod: 1000,\r\n      checkInterval: 1000\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DAppProvider config={config}>\r\n      <Fruitpayment />\r\n    </DAppProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}